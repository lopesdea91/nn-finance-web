import { renderUI, screen, act } from "@/@core/__tests__"
import { fireEvent, waitFor } from "@testing-library/react"
import { appCookie, financeWalletCookie } from "@/@core/infra/memory"
import { SearchWallet } from "./"
import { redirectObserver, observer } from "@/@core/domain/observer"

// jest.mock('@/@core/infra/geteway', () => ({
//   ...jest.requireActual('@/@core/infra/geteway')
// }))
// const spyFinanceWalletGatewayV1 = jest.spyOn(require('@/@core/infra/geteway'), 'financeWalletGatewayV1')

// jest.mock('@/@core/infra/http/utils', () => ({
//   ...jest.requireActual('@/@core/infra/http/utils')
// }))
// const spyHandlerCatchError = jest.spyOn(require('@/@core/infra/http/utils'), 'handlerCatchError')

describe('src/@core/presentation/views/finance.wallet/components/search', () => {
  // const redirectMock = jest.fn()

  // beforeEach(() => {
  //   appCookie.up()
  // })

  // it('reloadData withou cookie search', async () => {
  //   appCookie.down()

  //   spyFinanceWalletGatewayV1.mockImplementation(() => ({
  //     page: jest.fn().mockResolvedValue(({ data: { items: [] } }))
  //   }))

  //   renderUI(<SearchWallet />)

  //   const elButtonSearch = screen.queryByTestId('button-search') as HTMLButtonElement

  //   await act(() => {
  //     elButtonSearch.click()
  //   })
  // })

  // it('try get data but catch request', async () => {
  //   spyFinanceWalletGatewayV1.mockImplementation(() => ({
  //     page: jest.fn().mockResolvedValue(({ data: { items: [] } }))
  //   }))

  //   renderUI(<SearchWallet />)

  //   const elButtonSearch = screen.queryByTestId('button-search') as HTMLButtonElement

  //   spyFinanceWalletGatewayV1.mockImplementation(() => ({
  //     page: jest.fn().mockRejectedValueOnce({ message: 422 })
  //   }))

  //   await act(() => {
  //     elButtonSearch.click()
  //   })
  // })


  // it('click button actions', async () => {
  //   financeWalletCookie.reset()

  //   observer.subscribe(redirectObserver({subscrive: redirectMock}))

  //   spyFinanceWalletGatewayV1.mockImplementation(() => ({
  //     page: () => ({ data: { items: [] } })
  //   }))

  //   renderUI(<SearchWallet />)

  //   const elButtonReset = screen.queryByTestId('button-reset') as HTMLButtonElement
  //   const elButtonTrashed = screen.queryByTestId('button-trashed') as HTMLButtonElement
  //   const elButtonAdd = screen.queryByTestId('button-add') as HTMLButtonElement


  //   financeWalletCookie.set({ query: 'Test' })

  //   expect(financeWalletCookie.get().query).toEqual('Test')
  //   /** button-reset */
  //   await act(() => {
  //     elButtonReset.click()
  //   })
  //   expect(financeWalletCookie.get().query).toEqual('')


  //   expect(!!financeWalletCookie.get()?.deleted).toBeFalsy()
  //   /** button-trashed -> 1 */
  //   await act(() => {
  //     elButtonTrashed.click()
  //   })

  //   expect(!!financeWalletCookie.get()?.deleted).toBeTruthy()
  //   /** button-trashed -> 2 */
  //   await act(() => {
  //     elButtonTrashed.click()
  //   })

  //   await act(async () => {
  //     await elButtonAdd.click()
  //   })

  //   expect(redirectMock).toBeCalledTimes(1)
  // })




  // it('change inputs', async () => {
  //   spyFinanceWalletGatewayV1.mockImplementation(() => ({
  //     page: jest.fn().mockResolvedValue(({ data: { items: [] } }))
  //   }))

  //   renderUI(<SearchWallet />)

  //   const elInputQuery = screen.queryByTestId('input-query') as HTMLInputElement
  //   const elInputpanel = screen.queryByTestId('input-panel') as HTMLSelectElement
  //   const elButtonSearch = screen.queryByTestId('button-search') as HTMLButtonElement

  //   await waitFor(() => {
  //     fireEvent.change(elInputQuery, { target: { value: 'Teste' } })
  //     fireEvent.change(elInputpanel, { target: { value: '1' } })
  //   })

  //   await act(() => {
  //     elButtonSearch.click()
  //   })

  //   const currentCookie = financeWalletCookie.get()

  //   expect(currentCookie).toEqual({
  //     query: 'Teste',
  //     limit: 15,
  //     page: 1,
  //     sort: 'asc',
  //     order: 'description',
  //     panel: '1'
  //   })
  // })
})